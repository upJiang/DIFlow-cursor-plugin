# DIFlow VS Code 插件开发规则

## 项目概述
这是一个 VS Code 插件项目，使用 TypeScript + Vue 3 开发，包含 webview 功能。

## 技术栈
- **后端**: TypeScript + VS Code Extension API
- **前端**: Vue 3 + TypeScript + Vite + Vue Router
- **构建**: Webpack (后端) + Vite (前端)

## 项目结构
```
src/
├── commands/           # 命令实现
├── webview/           # webview 控制器
│   └── controllers/   # 各功能控制器
├── utils/             # 工具函数
└── extension.ts       # 插件入口

webview-vue/
├── src/
│   ├── views/         # 页面组件
│   ├── router/        # 路由配置
│   │   └── modules/   # 路由模块
│   ├── utils/         # 前端工具
│   └── types/         # 类型定义
```

## 开发规范

### 1. 命令注册模式
- 所有命令都在 `src/commands/` 目录下创建独立文件
- 使用 `register[功能名]` 函数导出
- 在 `extension.ts` 中统一注册

```typescript
// 命令文件模板
export const registerXXX = (context: ExtensionContext) => {
  context.subscriptions.push(
    commands.registerCommand("DiFlow.xxx", async () => {
      // 命令实现
    })
  );
};
```

### 2. Webview 集成模式
有两种 webview 模式：

#### A. 新窗口模式（推荐用于独立功能）
```typescript
import { showWebView } from "../utils/webviewUtils";

showWebView(context, {
  key: "main",
  title: "功能标题",
  viewColumn: 1,
  task: {
    task: "route",
    data: {
      path: "/页面路径",
    },
  },
});
```

#### B. 侧边栏视图模式（用于持久化面板）
```typescript
// 创建 WebviewViewProvider
class XXXWebviewViewProvider implements WebviewViewProvider {
  // 实现接口
}

// 注册视图
window.registerWebviewViewProvider("DiFlow.xxxView", provider);
```

### 3. 任务处理机制
- 后端任务在 `webviewUtils.ts` 的 `taskMap` 中注册
- 前端通过 `vscodeUtils.ts` 的 `callVscode` 发送任务
- 使用 `cbid` 机制处理异步回调

### 4. 路由配置
- 在 `webview-vue/src/router/modules/` 下创建路由模块
- 自动加载，无需手动注册
- 路由格式：
```typescript
export default [
  {
    path: "/功能路径",
    name: "功能名称",
    component: 组件,
  },
];
```

### 5. Vue 组件开发
- 使用 Composition API (`<script setup>`)
- 通过 `window.vscode.postMessage` 与后端通信
- 使用 `sendTaskToVscode` 工具函数处理异步任务

### 6. 类型定义
- 在 `webview-vue/src/types/global.d.ts` 中定义全局类型
- 已定义 `window.vscode` 接口
- 使用 TypeScript 严格模式

## 代码风格
- 使用双引号
- 使用分号
- 缩进 2 空格
- 函数名使用 camelCase
- 组件名使用 PascalCase
- 常量使用 UPPER_CASE

## 开发流程
1. 在 `src/commands/` 创建命令文件
2. 在 `package.json` 中注册命令和菜单
3. 在 `webview-vue/src/views/` 创建页面组件
4. 在 `webview-vue/src/router/modules/` 创建路由
5. 在 `extension.ts` 中注册命令
6. 运行 `npm run vscode:prepublish` 构建

## 注意事项
- 新增功能无需重新构建，热重载支持
- webview 使用 `retainContextWhenHidden: true` 保持状态
- 错误处理使用 try-catch 包装
- 异步操作使用 Promise 和 async/await
- 消息传递使用 cbid 机制确保回调正确性

## 禁止事项
- 不要直接修改 `webviewUtils.ts` 的核心逻辑
- 不要在组件中直接调用 VS Code API
- 不要忽略错误处理
- 不要使用 var 声明变量
- 不要在循环中创建函数

# 项目编码规则
- 使用 TypeScript 进行开发
- 遵循 ESLint 规范
- 优先使用函数式编程风格
- 添加详细的注释说明
- 使用双引号而不是单引号
- 函数名使用 camelCase
- 组件名使用 PascalCase 